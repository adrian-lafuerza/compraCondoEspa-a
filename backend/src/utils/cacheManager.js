const { redisCache, CacheKeys, CacheTTL } = require('./nodeCache');

/**
 * CacheManager - Clase unificada para manejo de cach√©
 * Proporciona una interfaz simplificada y consistente para operaciones de cach√©
 * Compatible con la implementaci√≥n anterior de node-cache
 */
class CacheManager {
    constructor() {
        this.cache = redisCache;
        this.keys = CacheKeys;
        this.ttl = CacheTTL;
    }

    /**
     * Generar clave de cach√© para propiedades
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {string} Clave de cach√©
     */
    generatePropertiesKey(params = {}) {
        const { page = 1, size = 20, state = '', location = '', propertyType = '' } = params;
        const keyParts = [
            this.keys.PROPERTIES,
            `page:${page}`,
            `size:${size}`,
            state && `state:${state}`,
            location && `location:${location}`,
            propertyType && `type:${propertyType}`
        ].filter(Boolean);
        
        return keyParts.join(':');
    }

    /**
     * Generar clave de cach√© para im√°genes de propiedad
     * @param {string} propertyId - ID de la propiedad
     * @returns {string} Clave de cach√©
     */
    generateImagesKey(propertyId) {
        return `${this.keys.IMAGES}:${propertyId}`;
    }

    /**
     * Obtener propiedades del cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<Object|null>} Datos de propiedades o null
     */
    async getProperties(params = {}) {
        try {
            const key = this.generatePropertiesKey(params);
            
            // Implementar timeout para evitar bloqueos
            const cachePromise = this.cache.get(key);
            const timeoutPromise = new Promise((resolve) => 
                setTimeout(() => {
                    console.log('‚ö†Ô∏è Cache timeout, continuando sin cach√©');
                    resolve(null);
                }, 3000)
            );
            
            const data = await Promise.race([cachePromise, timeoutPromise]);
            
            if (data) {
                console.log(`üì¶ Propiedades obtenidas del cach√©: ${key}`);
                return data;
            }
            
            return null;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al obtener propiedades del cach√©, continuando sin cach√©:', error.message);
            return null;
        }
    }

    /**
     * Guardar propiedades en el cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @param {Object} data - Datos de propiedades
     * @param {number} ttlSeconds - TTL personalizado (opcional)
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async setProperties(params = {}, data, ttlSeconds = null) {
        try {
            const key = this.generatePropertiesKey(params);
            const ttl = ttlSeconds || this.ttl.PROPERTIES;
            
            // Implementar timeout para evitar bloqueos
            const cachePromise = this.cache.set(key, data, ttl);
            const timeoutPromise = new Promise((resolve) => 
                setTimeout(() => {
                    console.log('‚ö†Ô∏è Cache set timeout, continuando sin guardar en cach√©');
                    resolve(false);
                }, 3000)
            );
            
            const success = await Promise.race([cachePromise, timeoutPromise]);
            
            if (success) {
                console.log(`üíæ Propiedades guardadas en cach√©: ${key} (TTL: ${ttl}s)`);
            } else {
                console.log('‚ö†Ô∏è No se pudieron guardar propiedades en cach√©');
            }
            
            return success;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al guardar propiedades en cach√©, continuando sin cach√©:', error.message);
            return false;
        }
    }

    /**
     * Obtener im√°genes de propiedad del cach√©
     * @param {string} propertyId - ID de la propiedad
     * @returns {Promise<Array|null>} Array de im√°genes o null
     */
    async getPropertyImages(propertyId) {
        try {
            const key = this.generateImagesKey(propertyId);
            const data = await this.cache.get(key);
            
            if (data) {
                console.log(`üì¶ Im√°genes obtenidas del cach√©: ${propertyId}`);
                return data;
            }
            
            return null;
        } catch (error) {
            console.log('‚ùå Error al obtener im√°genes del cach√©:', error.message);
            return null;
        }
    }

    /**
     * Guardar im√°genes de propiedad en el cach√©
     * @param {string} propertyId - ID de la propiedad
     * @param {Array} images - Array de im√°genes
     * @param {number} ttlSeconds - TTL personalizado (opcional)
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async setPropertyImages(propertyId, images, ttlSeconds = null) {
        try {
            const key = this.generateImagesKey(propertyId);
            const ttl = ttlSeconds || this.ttl.IMAGES;
            
            const success = await this.cache.set(key, images, ttl);
            
            if (success) {
                console.log(`üíæ Im√°genes guardadas en cach√©: ${propertyId} (TTL: ${ttl}s)`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ùå Error al guardar im√°genes en cach√©:', error.message);
            return false;
        }
    }

    /**
     * Eliminar propiedades espec√≠ficas del cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async deleteProperties(params = {}) {
        try {
            const key = this.generatePropertiesKey(params);
            const success = await this.cache.del(key);
            
            if (success) {
                console.log(`üóëÔ∏è Propiedades eliminadas del cach√©: ${key}`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ùå Error al eliminar propiedades del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Eliminar im√°genes de propiedad del cach√©
     * @param {string} propertyId - ID de la propiedad
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async deletePropertyImages(propertyId) {
        try {
            const key = this.generateImagesKey(propertyId);
            const success = await this.cache.del(key);
            
            if (success) {
                console.log(`üóëÔ∏è Im√°genes eliminadas del cach√©: ${propertyId}`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ùå Error al eliminar im√°genes del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todo el cach√© de propiedades
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAllProperties() {
        try {
            const success = await this.cache.clearProperties();
            return success;
        } catch (error) {
            console.log('‚ùå Error al limpiar cach√© de propiedades:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todo el cach√© de im√°genes
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAllImages() {
        try {
            const success = await this.cache.clearImages();
            return success;
        } catch (error) {
            console.log('‚ùå Error al limpiar cach√© de im√°genes:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todo el cach√©
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAll() {
        try {
            const success = await this.cache.flush();
            return success;
        } catch (error) {
            console.log('‚ùå Error al limpiar todo el cach√©:', error.message);
            return false;
        }
    }

    /**
     * Verificar si existen propiedades en cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<boolean>} True si existe
     */
    async hasProperties(params = {}) {
        try {
            const key = this.generatePropertiesKey(params);
            return await this.cache.exists(key);
        } catch (error) {
            return false;
        }
    }

    /**
     * Verificar si existen im√°genes en cach√©
     * @param {string} propertyId - ID de la propiedad
     * @returns {Promise<boolean>} True si existe
     */
    async hasPropertyImages(propertyId) {
        try {
            const key = this.generateImagesKey(propertyId);
            return await this.cache.exists(key);
        } catch (error) {
            return false;
        }
    }

    /**
     * Obtener TTL de propiedades
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<number>} TTL en segundos (-1 si no existe)
     */
    async getPropertiesTTL(params = {}) {
        try {
            const key = this.generatePropertiesKey(params);
            return await this.cache.ttl(key);
        } catch (error) {
            return -1;
        }
    }

    /**
     * Obtener TTL de im√°genes
     * @param {string} propertyId - ID de la propiedad
     * @returns {Promise<number>} TTL en segundos (-1 si no existe)
     */
    async getImagesTTL(propertyId) {
        try {
            const key = this.generateImagesKey(propertyId);
            return await this.cache.ttl(key);
        } catch (error) {
            return -1;
        }
    }

    /**
     * Obtener estad√≠sticas del cach√©
     * @returns {Promise<Object>} Estad√≠sticas del cach√©
     */
    async getStats() {
        try {
            return await this.cache.getStats();
        } catch (error) {
            return {
                connected: false,
                error: error.message
            };
        }
    }

    /**
     * Verificar estado de conexi√≥n
     * @returns {boolean} Estado de conexi√≥n
     */
    isConnected() {
        return this.cache.isConnected;
    }

    /**
     * Cerrar conexi√≥n del cach√©
     * @returns {Promise<void>}
     */
    async close() {
        try {
            await this.cache.close();
        } catch (error) {
            console.log('‚ùå Error al cerrar conexi√≥n del cach√©:', error.message);
        }
    }

    /**
     * M√©todo de utilidad para obtener datos con fallback
     * @param {string} key - Clave de cach√©
     * @param {Function} fetchFunction - Funci√≥n para obtener datos si no est√°n en cach√©
     * @param {number} ttlSeconds - TTL personalizado
     * @returns {Promise<any>} Datos obtenidos
     */
    async getOrSet(key, fetchFunction, ttlSeconds = null) {
        try {
            // Intentar obtener del cach√© primero
            let data = await this.cache.get(key);
            
            if (data) {
                return data;
            }
            
            // Si no est√° en cach√©, obtener usando la funci√≥n
            data = await fetchFunction();
            
            if (data) {
                // Guardar en cach√© para futuras consultas
                await this.cache.set(key, data, ttlSeconds);
            }
            
            return data;
        } catch (error) {
            console.log('‚ùå Error en getOrSet:', error.message);
            // En caso de error, intentar obtener directamente
            try {
                return await fetchFunction();
            } catch (fetchError) {
                console.log('‚ùå Error en funci√≥n de fallback:', fetchError.message);
                return null;
            }
        }
    }

    /**
     * Invalidar cach√© relacionado con una propiedad espec√≠fica
     * @param {string} propertyId - ID de la propiedad
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async invalidateProperty(propertyId) {
        try {
            // Eliminar im√°genes de la propiedad
            await this.deletePropertyImages(propertyId);
            
            // Eliminar todas las b√∫squedas de propiedades (ya que pueden incluir esta propiedad)
            await this.clearAllProperties();
            
            console.log(`üîÑ Cach√© invalidado para propiedad: ${propertyId}`);
            return true;
        } catch (error) {
            console.log('‚ùå Error al invalidar cach√© de propiedad:', error.message);
            return false;
        }
    }
}

// Crear instancia √∫nica del CacheManager
const cacheManager = new CacheManager();

module.exports = {
    CacheManager,
    cacheManager, // Instancia singleton
    CacheKeys,
    CacheTTL
};
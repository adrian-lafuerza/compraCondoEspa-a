const { redisCache, CacheKeys, CacheTTL } = require('./nodeCache');

/**
 * MailchimpCacheManager - Clase unificada para manejo de cach√© de Mailchimp
 * Proporciona una interfaz simplificada y consistente para operaciones de cach√©
 * Compatible con la implementaci√≥n de node-cache
 */
class MailchimpCacheManager {
    constructor() {
        this.cache = redisCache;
        this.keys = {
            CAMPAIGNS: 'mailchimp:campaigns',
            CAMPAIGN_CONTENT: 'mailchimp:content'
        };
        this.ttl = {
            CAMPAIGNS: 1800, // 30 minutos
            CAMPAIGN_CONTENT: 3600, // 1 hora
            CAMPAIGN_DETAIL: 1800 // 30 minutos
        };
    }

    /**
     * Generar clave de cach√© para campa√±as
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {string} Clave de cach√©
     */
    generateCampaignsKey(params = {}) {
        const { status = 'all', type = 'all', count = 10, offset = 0, includeHtml = 'false' } = params;
        const keyParts = [
            this.keys.CAMPAIGNS,
            `status:${status}`,
            `type:${type}`,
            `count:${count}`,
            `offset:${offset}`,
            `html:${includeHtml}`
        ];
        
        return keyParts.join(':');
    }

    /**
     * Generar clave de cach√© para contenido de campa√±a
     * @param {string} campaignId - ID de la campa√±a
     * @returns {string} Clave de cach√©
     */
    generateContentKey(campaignId) {
        return `${this.keys.CAMPAIGN_CONTENT}:${campaignId}`;
    }

    /**
     * Obtener campa√±as del cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<Object|null>} Datos de campa√±as o null
     */
    async getCampaigns(params = {}) {
        try {
            const key = this.generateCampaignsKey(params);
            const data = await this.cache.get(key);
            
            if (data) {
                console.log(`üì¶ Campa√±as obtenidas del cach√©: ${key}`);
                return data;
            }
            
            return null;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al obtener campa√±as del cach√©, continuando sin cach√©:', error.message);
            return null;
        }
    }

    /**
     * Guardar campa√±as en el cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @param {Object} data - Datos de campa√±as
     * @param {number} ttlSeconds - TTL personalizado (opcional)
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async setCampaigns(params = {}, data, ttlSeconds = null) {
        try {
            const key = this.generateCampaignsKey(params);
            const ttl = ttlSeconds || this.ttl.CAMPAIGNS;
            
            const success = await this.cache.set(key, data, ttl);
            
            if (success) {
                console.log(`üíæ Campa√±as guardadas en cach√©: ${key}`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al guardar campa√±as en cach√©:', error.message);
            return false;
        }
    }

    /**
     * Obtener contenido de campa√±a del cach√©
     * @param {string} campaignId - ID de la campa√±a
     * @returns {Promise<Object|null>} Contenido de campa√±a o null
     */
    async getCampaignContent(campaignId) {
        try {
            const key = this.generateContentKey(campaignId);
            const data = await this.cache.get(key);
            
            if (data) {
                console.log(`üìÑ Contenido de campa√±a obtenido del cach√©: ${campaignId}`);
            }
            
            return data;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al obtener contenido del cach√©:', error.message);
            return null;
        }
    }

    /**
     * Guardar contenido de campa√±a en el cach√©
     * @param {string} campaignId - ID de la campa√±a
     * @param {Object} content - Contenido de la campa√±a
     * @param {number} ttlSeconds - TTL personalizado (opcional)
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async setCampaignContent(campaignId, content, ttlSeconds = null) {
        try {
            const key = this.generateContentKey(campaignId);
            const ttl = ttlSeconds || this.ttl.CAMPAIGN_CONTENT;
            
            const success = await this.cache.set(key, content, ttl);
            
            if (success) {
                console.log(`üíæ Contenido de campa√±a guardado en cach√©: ${campaignId} (TTL: ${ttl}s)`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al guardar contenido en cach√©:', error.message);
            return false;
        }
    }

    /**
     * Eliminar campa√±as del cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async deleteCampaigns(params = {}) {
        try {
            const key = this.generateCampaignsKey(params);
            const success = await this.cache.del(key);
            
            if (success) {
                console.log(`üóëÔ∏è Campa√±as eliminadas del cach√©: ${key}`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al eliminar campa√±as del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Eliminar contenido de campa√±a del cach√©
     * @param {string} campaignId - ID de la campa√±a
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async deleteCampaignContent(campaignId) {
        try {
            const key = this.generateContentKey(campaignId);
            const success = await this.cache.del(key);
            
            if (success) {
                console.log(`üóëÔ∏è Contenido de campa√±a eliminado del cach√©: ${campaignId}`);
            }
            
            return success;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al eliminar contenido del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todas las campa√±as del cach√©
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAllCampaigns() {
        try {
            // Obtener todas las claves que empiecen con el prefijo de campa√±as
            const stats = await this.cache.getStats();
            let cleared = 0;
            
            // En NodeCache no hay una forma directa de obtener claves por patr√≥n
            // Por lo que usaremos flush para limpiar todo
            await this.cache.flush();
            console.log('üßπ Todas las campa√±as de Mailchimp limpiadas del cach√©');
            
            return true;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al limpiar campa√±as del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todo el contenido de campa√±as del cach√©
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAllContent() {
        try {
            await this.cache.flush();
            console.log('üßπ Todo el contenido de campa√±as de Mailchimp limpiado del cach√©');
            
            return true;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al limpiar contenido del cach√©:', error.message);
            return false;
        }
    }

    /**
     * Limpiar todo el cach√© de Mailchimp
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async clearAll() {
        try {
            await this.cache.flush();
            console.log('üßπ Todo el cach√© de Mailchimp limpiado');
            
            return true;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al limpiar todo el cach√©:', error.message);
            return false;
        }
    }

    /**
     * Verificar si existen campa√±as en cach√©
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<boolean>} True si existe
     */
    async hasCampaigns(params = {}) {
        try {
            const key = this.generateCampaignsKey(params);
            return await this.cache.exists(key);
        } catch (error) {
            return false;
        }
    }

    /**
     * Verificar si existe contenido de campa√±a en cach√©
     * @param {string} campaignId - ID de la campa√±a
     * @returns {Promise<boolean>} True si existe
     */
    async hasCampaignContent(campaignId) {
        try {
            const key = this.generateContentKey(campaignId);
            return await this.cache.exists(key);
        } catch (error) {
            return false;
        }
    }

    /**
     * Obtener TTL de campa√±as
     * @param {Object} params - Par√°metros de b√∫squeda
     * @returns {Promise<number>} TTL en segundos
     */
    async getCampaignsTTL(params = {}) {
        try {
            const key = this.generateCampaignsKey(params);
            return await this.cache.ttl(key);
        } catch (error) {
            return -1;
        }
    }

    /**
     * Obtener TTL de contenido de campa√±a
     * @param {string} campaignId - ID de la campa√±a
     * @returns {Promise<number>} TTL en segundos
     */
    async getContentTTL(campaignId) {
        try {
            const key = this.generateContentKey(campaignId);
            return await this.cache.ttl(key);
        } catch (error) {
            return -1;
        }
    }

    /**
     * Obtener estad√≠sticas del cach√©
     * @returns {Promise<Object>} Estad√≠sticas del cach√©
     */
    async getStats() {
        try {
            return await this.cache.getStats();
        } catch (error) {
            console.log('‚ö†Ô∏è Error al obtener estad√≠sticas del cach√©:', error.message);
            return {
                keys: 0,
                hits: 0,
                misses: 0,
                ksize: 0,
                vsize: 0
            };
        }
    }

    /**
     * Verificar si el cach√© est√° conectado
     * @returns {boolean} Estado de conexi√≥n
     */
    isConnected() {
        return this.cache.isConnected;
    }

    /**
     * Cerrar conexi√≥n del cach√©
     * @returns {Promise<void>}
     */
    async close() {
        try {
            await this.cache.close();
            console.log('üîå Conexi√≥n de cach√© de Mailchimp cerrada');
        } catch (error) {
            console.log('‚ö†Ô∏è Error al cerrar conexi√≥n del cach√©:', error.message);
        }
    }

    /**
     * M√©todo helper para obtener o establecer datos en cach√©
     * @param {string} key - Clave del cach√©
     * @param {Function} fetchFunction - Funci√≥n para obtener datos si no est√°n en cach√©
     * @param {number} ttlSeconds - TTL personalizado
     * @returns {Promise<any>} Datos del cach√© o de la funci√≥n
     */
    async getOrSet(key, fetchFunction, ttlSeconds = null) {
        try {
            // Intentar obtener del cach√© primero
            let data = await this.cache.get(key);
            
            if (data) {
                return data;
            }
            
            // Si no est√° en cach√©, ejecutar funci√≥n de obtenci√≥n
            data = await fetchFunction();
            
            if (data) {
                // Guardar en cach√©
                await this.cache.set(key, data, ttlSeconds || this.ttl.CAMPAIGNS);
            }
            
            return data;
        } catch (error) {
            console.log('‚ö†Ô∏è Error en getOrSet:', error.message);
            // En caso de error, intentar ejecutar la funci√≥n directamente
            return await fetchFunction();
        }
    }

    /**
     * Invalidar cach√© relacionado con una campa√±a espec√≠fica
     * @param {string} campaignId - ID de la campa√±a
     * @returns {Promise<boolean>} √âxito de la operaci√≥n
     */
    async invalidateCampaign(campaignId) {
        try {
            // Eliminar contenido de la campa√±a
            await this.deleteCampaignContent(campaignId);
            
            // Tambi√©n podr√≠amos eliminar todas las listas de campa√±as que podr√≠an contener esta campa√±a
            // Pero por simplicidad, solo eliminamos el contenido espec√≠fico
            
            console.log(`üóëÔ∏è Cach√© invalidado para campa√±a: ${campaignId}`);
            return true;
        } catch (error) {
            console.log('‚ö†Ô∏è Error al invalidar cach√© de campa√±a:', error.message);
            return false;
        }
    }
}

// Crear instancia singleton
const mailchimpCacheManager = new MailchimpCacheManager();

module.exports = {
    MailchimpCacheManager,
    mailchimpCacheManager, // Instancia singleton
    MailchimpCacheKeys: {
        CAMPAIGNS: 'mailchimp:campaigns',
        CAMPAIGN_CONTENT: 'mailchimp:content'
    },
    MailchimpCacheTTL: {
        CAMPAIGNS: 1800, // 30 minutos
        CAMPAIGN_CONTENT: 3600, // 1 hora
        CAMPAIGN_DETAIL: 1800 // 30 minutos
    }
};